#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VVS.API.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VVSBase")]
	public partial class VVSDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertLines(Lines instance);
    partial void UpdateLines(Lines instance);
    partial void DeleteLines(Lines instance);
    partial void InsertVehicles(Vehicles instance);
    partial void UpdateVehicles(Vehicles instance);
    partial void DeleteVehicles(Vehicles instance);
    #endregion
		
		public VVSDatabaseDataContext() : 
				base(global::VVS.API.Properties.Settings.Default.VVSBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VVSDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VVSDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VVSDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VVSDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<History> History
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<Lines> Lines
		{
			get
			{
				return this.GetTable<Lines>();
			}
		}
		
		public System.Data.Linq.Table<Vehicles> Vehicles
		{
			get
			{
				return this.GetTable<Vehicles>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicle;
		
		private System.DateTimeOffset _timestamp;
		
		private System.DateTimeOffset _timestamp_before;
		
		private System.Nullable<bool> _isAtStop;
		
		private System.Nullable<int> _delay;
		
		private string _current_stop;
		
		private string _direction;
		
		private string _journey;
		
		private string _latitude;
		
		private string _longitude;
		
		private string _next_stop;
		
		private EntityRef<Vehicles> _Vehicles;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleChanging(int value);
    partial void OnvehicleChanged();
    partial void OntimestampChanging(System.DateTimeOffset value);
    partial void OntimestampChanged();
    partial void Ontimestamp_beforeChanging(System.DateTimeOffset value);
    partial void Ontimestamp_beforeChanged();
    partial void OnisAtStopChanging(System.Nullable<bool> value);
    partial void OnisAtStopChanged();
    partial void OndelayChanging(System.Nullable<int> value);
    partial void OndelayChanged();
    partial void Oncurrent_stopChanging(string value);
    partial void Oncurrent_stopChanged();
    partial void OndirectionChanging(string value);
    partial void OndirectionChanged();
    partial void OnjourneyChanging(string value);
    partial void OnjourneyChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void Onnext_stopChanging(string value);
    partial void Onnext_stopChanged();
    #endregion
		
		public History()
		{
			this._Vehicles = default(EntityRef<Vehicles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicle", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int vehicle
		{
			get
			{
				return this._vehicle;
			}
			set
			{
				if ((this._vehicle != value))
				{
					if (this._Vehicles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleChanging(value);
					this.SendPropertyChanging();
					this._vehicle = value;
					this.SendPropertyChanged("vehicle");
					this.OnvehicleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTimeOffset NOT NULL", IsPrimaryKey=true)]
		public System.DateTimeOffset timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp_before", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset timestamp_before
		{
			get
			{
				return this._timestamp_before;
			}
			set
			{
				if ((this._timestamp_before != value))
				{
					this.Ontimestamp_beforeChanging(value);
					this.SendPropertyChanging();
					this._timestamp_before = value;
					this.SendPropertyChanged("timestamp_before");
					this.Ontimestamp_beforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAtStop", DbType="Bit")]
		public System.Nullable<bool> isAtStop
		{
			get
			{
				return this._isAtStop;
			}
			set
			{
				if ((this._isAtStop != value))
				{
					this.OnisAtStopChanging(value);
					this.SendPropertyChanging();
					this._isAtStop = value;
					this.SendPropertyChanged("isAtStop");
					this.OnisAtStopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delay", DbType="Int")]
		public System.Nullable<int> delay
		{
			get
			{
				return this._delay;
			}
			set
			{
				if ((this._delay != value))
				{
					this.OndelayChanging(value);
					this.SendPropertyChanging();
					this._delay = value;
					this.SendPropertyChanged("delay");
					this.OndelayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_current_stop", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string current_stop
		{
			get
			{
				return this._current_stop;
			}
			set
			{
				if ((this._current_stop != value))
				{
					this.Oncurrent_stopChanging(value);
					this.SendPropertyChanging();
					this._current_stop = value;
					this.SendPropertyChanged("current_stop");
					this.Oncurrent_stopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direction", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string direction
		{
			get
			{
				return this._direction;
			}
			set
			{
				if ((this._direction != value))
				{
					this.OndirectionChanging(value);
					this.SendPropertyChanging();
					this._direction = value;
					this.SendPropertyChanged("direction");
					this.OndirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_journey", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string journey
		{
			get
			{
				return this._journey;
			}
			set
			{
				if ((this._journey != value))
				{
					this.OnjourneyChanging(value);
					this.SendPropertyChanging();
					this._journey = value;
					this.SendPropertyChanged("journey");
					this.OnjourneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_next_stop", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string next_stop
		{
			get
			{
				return this._next_stop;
			}
			set
			{
				if ((this._next_stop != value))
				{
					this.Onnext_stopChanging(value);
					this.SendPropertyChanging();
					this._next_stop = value;
					this.SendPropertyChanged("next_stop");
					this.Onnext_stopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicles_History", Storage="_Vehicles", ThisKey="vehicle", OtherKey="Id", IsForeignKey=true)]
		public Vehicles Vehicles
		{
			get
			{
				return this._Vehicles.Entity;
			}
			set
			{
				Vehicles previousValue = this._Vehicles.Entity;
				if (((previousValue != value) 
							|| (this._Vehicles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicles.Entity = null;
						previousValue.History.Remove(this);
					}
					this._Vehicles.Entity = value;
					if ((value != null))
					{
						value.History.Add(this);
						this._vehicle = value.Id;
					}
					else
					{
						this._vehicle = default(int);
					}
					this.SendPropertyChanged("Vehicles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lines")]
	public partial class Lines : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _vehicle_type;
		
		private string _name;
		
		private string _citycode;
		
		private EntitySet<Vehicles> _Vehicles;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onvehicle_typeChanging(System.Data.Linq.Binary value);
    partial void Onvehicle_typeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncitycodeChanging(string value);
    partial void OncitycodeChanged();
    #endregion
		
		public Lines()
		{
			this._Vehicles = new EntitySet<Vehicles>(new Action<Vehicles>(this.attach_Vehicles), new Action<Vehicles>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicle_type", DbType="Binary(1) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary vehicle_type
		{
			get
			{
				return this._vehicle_type;
			}
			set
			{
				if ((this._vehicle_type != value))
				{
					this.Onvehicle_typeChanging(value);
					this.SendPropertyChanging();
					this._vehicle_type = value;
					this.SendPropertyChanged("vehicle_type");
					this.Onvehicle_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citycode", DbType="NChar(4)")]
		public string citycode
		{
			get
			{
				return this._citycode;
			}
			set
			{
				if ((this._citycode != value))
				{
					this.OncitycodeChanging(value);
					this.SendPropertyChanging();
					this._citycode = value;
					this.SendPropertyChanged("citycode");
					this.OncitycodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lines_Vehicles", Storage="_Vehicles", ThisKey="Id", OtherKey="line")]
		public EntitySet<Vehicles> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Lines = this;
		}
		
		private void detach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Lines = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicles")]
	public partial class Vehicles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _db_id;
		
		private int _line;
		
		private System.Data.Linq.Binary _vehicle_type;
		
		private EntitySet<History> _History;
		
		private EntityRef<Lines> _Lines;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Ondb_idChanging(string value);
    partial void Ondb_idChanged();
    partial void OnlineChanging(int value);
    partial void OnlineChanged();
    partial void Onvehicle_typeChanging(System.Data.Linq.Binary value);
    partial void Onvehicle_typeChanged();
    #endregion
		
		public Vehicles()
		{
			this._History = new EntitySet<History>(new Action<History>(this.attach_History), new Action<History>(this.detach_History));
			this._Lines = default(EntityRef<Lines>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_db_id", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string db_id
		{
			get
			{
				return this._db_id;
			}
			set
			{
				if ((this._db_id != value))
				{
					this.Ondb_idChanging(value);
					this.SendPropertyChanging();
					this._db_id = value;
					this.SendPropertyChanged("db_id");
					this.Ondb_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line", DbType="Int NOT NULL")]
		public int line
		{
			get
			{
				return this._line;
			}
			set
			{
				if ((this._line != value))
				{
					if (this._Lines.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlineChanging(value);
					this.SendPropertyChanging();
					this._line = value;
					this.SendPropertyChanged("line");
					this.OnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicle_type", DbType="Binary(1) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary vehicle_type
		{
			get
			{
				return this._vehicle_type;
			}
			set
			{
				if ((this._vehicle_type != value))
				{
					this.Onvehicle_typeChanging(value);
					this.SendPropertyChanging();
					this._vehicle_type = value;
					this.SendPropertyChanged("vehicle_type");
					this.Onvehicle_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicles_History", Storage="_History", ThisKey="Id", OtherKey="vehicle")]
		public EntitySet<History> History
		{
			get
			{
				return this._History;
			}
			set
			{
				this._History.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lines_Vehicles", Storage="_Lines", ThisKey="line", OtherKey="Id", IsForeignKey=true)]
		public Lines Lines
		{
			get
			{
				return this._Lines.Entity;
			}
			set
			{
				Lines previousValue = this._Lines.Entity;
				if (((previousValue != value) 
							|| (this._Lines.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lines.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Lines.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._line = value.Id;
					}
					else
					{
						this._line = default(int);
					}
					this.SendPropertyChanged("Lines");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_History(History entity)
		{
			this.SendPropertyChanging();
			entity.Vehicles = this;
		}
		
		private void detach_History(History entity)
		{
			this.SendPropertyChanging();
			entity.Vehicles = null;
		}
	}
}
#pragma warning restore 1591
