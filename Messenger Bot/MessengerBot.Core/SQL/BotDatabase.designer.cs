#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessengerBot.Core.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestBase")]
	public partial class BotDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertAbonements(Abonements instance);
    partial void UpdateAbonements(Abonements instance);
    partial void DeleteAbonements(Abonements instance);
    partial void InsertBlacklist(Blacklist instance);
    partial void UpdateBlacklist(Blacklist instance);
    partial void DeleteBlacklist(Blacklist instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWhitelist(Whitelist instance);
    partial void UpdateWhitelist(Whitelist instance);
    partial void DeleteWhitelist(Whitelist instance);
    #endregion
		
		public BotDatabaseDataContext() : 
				base(global::MessengerBot.Core.Properties.Settings.Default.TestBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BotDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abonements> Abonements
		{
			get
			{
				return this.GetTable<Abonements>();
			}
		}
		
		public System.Data.Linq.Table<Blacklist> Blacklist
		{
			get
			{
				return this.GetTable<Blacklist>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Whitelist> Whitelist
		{
			get
			{
				return this.GetTable<Whitelist>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abonements")]
	public partial class Abonements : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _user;
		
		private int _offset;
		
		private string _city_code;
		
		private string _name;
		
		private bool _type;
		
		private bool _whitelist;
		
		private bool _blacklist;
		
		private bool _silent;
		
		private System.Data.Linq.Binary _timestamp;
		
		private EntitySet<Blacklist> _Blacklist1;
		
		private EntitySet<Whitelist> _Whitelist1;
		
		private EntityRef<User> _User1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnoffsetChanging(int value);
    partial void OnoffsetChanged();
    partial void Oncity_codeChanging(string value);
    partial void Oncity_codeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OnwhitelistChanging(bool value);
    partial void OnwhitelistChanged();
    partial void OnblacklistChanging(bool value);
    partial void OnblacklistChanged();
    partial void OnsilentChanging(bool value);
    partial void OnsilentChanged();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    #endregion
		
		public Abonements()
		{
			this._Blacklist1 = new EntitySet<Blacklist>(new Action<Blacklist>(this.attach_Blacklist1), new Action<Blacklist>(this.detach_Blacklist1));
			this._Whitelist1 = new EntitySet<Whitelist>(new Action<Whitelist>(this.attach_Whitelist1), new Action<Whitelist>(this.detach_Whitelist1));
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_offset", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int offset
		{
			get
			{
				return this._offset;
			}
			set
			{
				if ((this._offset != value))
				{
					this.OnoffsetChanging(value);
					this.SendPropertyChanging();
					this._offset = value;
					this.SendPropertyChanged("offset");
					this.OnoffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city_code", DbType="NChar(5) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string city_code
		{
			get
			{
				return this._city_code;
			}
			set
			{
				if ((this._city_code != value))
				{
					this.Oncity_codeChanging(value);
					this.SendPropertyChanging();
					this._city_code = value;
					this.SendPropertyChanged("city_code");
					this.Oncity_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_whitelist", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool whitelist
		{
			get
			{
				return this._whitelist;
			}
			set
			{
				if ((this._whitelist != value))
				{
					this.OnwhitelistChanging(value);
					this.SendPropertyChanging();
					this._whitelist = value;
					this.SendPropertyChanged("whitelist");
					this.OnwhitelistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blacklist", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool blacklist
		{
			get
			{
				return this._blacklist;
			}
			set
			{
				if ((this._blacklist != value))
				{
					this.OnblacklistChanging(value);
					this.SendPropertyChanging();
					this._blacklist = value;
					this.SendPropertyChanged("blacklist");
					this.OnblacklistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_silent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool silent
		{
			get
			{
				return this._silent;
			}
			set
			{
				if ((this._silent != value))
				{
					this.OnsilentChanging(value);
					this.SendPropertyChanging();
					this._silent = value;
					this.SendPropertyChanged("silent");
					this.OnsilentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonements_Blacklist", Storage="_Blacklist1", ThisKey="Id", OtherKey="abo")]
		public EntitySet<Blacklist> Blacklist1
		{
			get
			{
				return this._Blacklist1;
			}
			set
			{
				this._Blacklist1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonements_Whitelist", Storage="_Whitelist1", ThisKey="Id", OtherKey="abo")]
		public EntitySet<Whitelist> Whitelist1
		{
			get
			{
				return this._Whitelist1;
			}
			set
			{
				this._Whitelist1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Abonements", Storage="_User1", ThisKey="user", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Abonements.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Abonements.Add(this);
						this._user = value.Id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blacklist1(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Abonements = this;
		}
		
		private void detach_Blacklist1(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Abonements = null;
		}
		
		private void attach_Whitelist1(Whitelist entity)
		{
			this.SendPropertyChanging();
			entity.Abonements = this;
		}
		
		private void detach_Whitelist1(Whitelist entity)
		{
			this.SendPropertyChanging();
			entity.Abonements = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blacklist")]
	public partial class Blacklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _user;
		
		private int _abo;
		
		private System.DateTime _from;
		
		private System.DateTime _to;
		
		private EntityRef<Abonements> _Abonements;
		
		private EntityRef<User> _User1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnaboChanging(int value);
    partial void OnaboChanged();
    partial void OnfromChanging(System.DateTime value);
    partial void OnfromChanged();
    partial void OntoChanging(System.DateTime value);
    partial void OntoChanged();
    #endregion
		
		public Blacklist()
		{
			this._Abonements = default(EntityRef<Abonements>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abo", DbType="Int NOT NULL")]
		public int abo
		{
			get
			{
				return this._abo;
			}
			set
			{
				if ((this._abo != value))
				{
					if (this._Abonements.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaboChanging(value);
					this.SendPropertyChanging();
					this._abo = value;
					this.SendPropertyChanged("abo");
					this.OnaboChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[from]", Storage="_from", DbType="DateTime NOT NULL")]
		public System.DateTime from
		{
			get
			{
				return this._from;
			}
			set
			{
				if ((this._from != value))
				{
					this.OnfromChanging(value);
					this.SendPropertyChanging();
					this._from = value;
					this.SendPropertyChanged("from");
					this.OnfromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[to]", Storage="_to", DbType="DateTime NOT NULL")]
		public System.DateTime to
		{
			get
			{
				return this._to;
			}
			set
			{
				if ((this._to != value))
				{
					this.OntoChanging(value);
					this.SendPropertyChanging();
					this._to = value;
					this.SendPropertyChanged("to");
					this.OntoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonements_Blacklist", Storage="_Abonements", ThisKey="abo", OtherKey="Id", IsForeignKey=true)]
		public Abonements Abonements
		{
			get
			{
				return this._Abonements.Entity;
			}
			set
			{
				Abonements previousValue = this._Abonements.Entity;
				if (((previousValue != value) 
							|| (this._Abonements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonements.Entity = null;
						previousValue.Blacklist1.Remove(this);
					}
					this._Abonements.Entity = value;
					if ((value != null))
					{
						value.Blacklist1.Add(this);
						this._abo = value.Id;
					}
					else
					{
						this._abo = default(int);
					}
					this.SendPropertyChanged("Abonements");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blacklist", Storage="_User1", ThisKey="user", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Blacklist.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Blacklist.Add(this);
						this._user = value.Id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Telegram_Id;
		
		private System.Nullable<int> _group;
		
		private System.Nullable<long> _chat_id;
		
		private System.Data.Linq.Binary _timestamp;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _username;
		
		private EntitySet<Abonements> _Abonements;
		
		private EntitySet<Blacklist> _Blacklist;
		
		private EntitySet<Whitelist> _Whitelist;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTelegram_IdChanging(int value);
    partial void OnTelegram_IdChanged();
    partial void OngroupChanging(System.Nullable<int> value);
    partial void OngroupChanged();
    partial void Onchat_idChanging(System.Nullable<long> value);
    partial void Onchat_idChanged();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    #endregion
		
		public User()
		{
			this._Abonements = new EntitySet<Abonements>(new Action<Abonements>(this.attach_Abonements), new Action<Abonements>(this.detach_Abonements));
			this._Blacklist = new EntitySet<Blacklist>(new Action<Blacklist>(this.attach_Blacklist), new Action<Blacklist>(this.detach_Blacklist));
			this._Whitelist = new EntitySet<Whitelist>(new Action<Whitelist>(this.attach_Whitelist), new Action<Whitelist>(this.detach_Whitelist));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telegram_Id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Telegram_Id
		{
			get
			{
				return this._Telegram_Id;
			}
			set
			{
				if ((this._Telegram_Id != value))
				{
					this.OnTelegram_IdChanging(value);
					this.SendPropertyChanging();
					this._Telegram_Id = value;
					this.SendPropertyChanged("Telegram_Id");
					this.OnTelegram_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[group]", Storage="_group", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> group
		{
			get
			{
				return this._group;
			}
			set
			{
				if ((this._group != value))
				{
					this.OngroupChanging(value);
					this.SendPropertyChanging();
					this._group = value;
					this.SendPropertyChanged("group");
					this.OngroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chat_id", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> chat_id
		{
			get
			{
				return this._chat_id;
			}
			set
			{
				if ((this._chat_id != value))
				{
					this.Onchat_idChanging(value);
					this.SendPropertyChanging();
					this._chat_id = value;
					this.SendPropertyChanged("chat_id");
					this.Onchat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Abonements", Storage="_Abonements", ThisKey="Id", OtherKey="user")]
		public EntitySet<Abonements> Abonements
		{
			get
			{
				return this._Abonements;
			}
			set
			{
				this._Abonements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blacklist", Storage="_Blacklist", ThisKey="Id", OtherKey="user")]
		public EntitySet<Blacklist> Blacklist
		{
			get
			{
				return this._Blacklist;
			}
			set
			{
				this._Blacklist.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Whitelist", Storage="_Whitelist", ThisKey="Id", OtherKey="user")]
		public EntitySet<Whitelist> Whitelist
		{
			get
			{
				return this._Whitelist;
			}
			set
			{
				this._Whitelist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Abonements(Abonements entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Abonements(Abonements entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Blacklist(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Blacklist(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Whitelist(Whitelist entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Whitelist(Whitelist entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Whitelist")]
	public partial class Whitelist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _user;
		
		private int _abo;
		
		private System.DateTime _from;
		
		private System.DateTime _to;
		
		private EntityRef<Abonements> _Abonements;
		
		private EntityRef<User> _User1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnaboChanging(int value);
    partial void OnaboChanged();
    partial void OnfromChanging(System.DateTime value);
    partial void OnfromChanged();
    partial void OntoChanging(System.DateTime value);
    partial void OntoChanged();
    #endregion
		
		public Whitelist()
		{
			this._Abonements = default(EntityRef<Abonements>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abo", DbType="Int NOT NULL")]
		public int abo
		{
			get
			{
				return this._abo;
			}
			set
			{
				if ((this._abo != value))
				{
					if (this._Abonements.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaboChanging(value);
					this.SendPropertyChanging();
					this._abo = value;
					this.SendPropertyChanged("abo");
					this.OnaboChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[from]", Storage="_from", DbType="DateTime NOT NULL")]
		public System.DateTime from
		{
			get
			{
				return this._from;
			}
			set
			{
				if ((this._from != value))
				{
					this.OnfromChanging(value);
					this.SendPropertyChanging();
					this._from = value;
					this.SendPropertyChanged("from");
					this.OnfromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[to]", Storage="_to", DbType="DateTime NOT NULL")]
		public System.DateTime to
		{
			get
			{
				return this._to;
			}
			set
			{
				if ((this._to != value))
				{
					this.OntoChanging(value);
					this.SendPropertyChanging();
					this._to = value;
					this.SendPropertyChanged("to");
					this.OntoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abonements_Whitelist", Storage="_Abonements", ThisKey="abo", OtherKey="Id", IsForeignKey=true)]
		public Abonements Abonements
		{
			get
			{
				return this._Abonements.Entity;
			}
			set
			{
				Abonements previousValue = this._Abonements.Entity;
				if (((previousValue != value) 
							|| (this._Abonements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonements.Entity = null;
						previousValue.Whitelist1.Remove(this);
					}
					this._Abonements.Entity = value;
					if ((value != null))
					{
						value.Whitelist1.Add(this);
						this._abo = value.Id;
					}
					else
					{
						this._abo = default(int);
					}
					this.SendPropertyChanged("Abonements");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Whitelist", Storage="_User1", ThisKey="user", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Whitelist.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Whitelist.Add(this);
						this._user = value.Id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
